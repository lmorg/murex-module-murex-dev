if { $GOPATH } else {
    err 'This module requires `$GOPATH` to be set'
}

if { = `${os}` != `windows` } then {
    function agent {
        # Launch ssh-agent
        ssh-agent -> head -n2 -> [ :0 ] -> prefix "export " -> source
        ssh-add: @{g <!null> ~/.ssh/*.key} @{g <!null> ~/.ssh/*.pem}
    }
    
} else {
    function agent {
        # On POSIX systems this would launch `ssh-agent` however on Windows it is an empty function
    }
}

function murex-dev {
    # Sets murex up so I can dev it easier
    #go: install github.com/lmorg/murex/utils/docgen
    source {
        cd: $GOPATH/src/github.com/lmorg/murex
        config: set shell prompt (murex-devÂ» )
        agent
    }
        
    function mxbuild {
        # Builds murex then launches it
        try {
            out: "Running docgen...."
            docgen: <!out> -panic -config gen/docgen.yaml
            out: "Formatting generated source...."
            go: <null> fmt @{g: builtins/docs/*.go}
            go: <null> fmt @{g: config/defaults/*.go}
            out: "Compiling murex...."
            go: build github.com/lmorg/murex
            out: "Starting...."
            ./murex
        }
    }

    function mxdebug {
        # Builds murex then launches it
        try {
            out: "Running docgen...."
            docgen: <!out> -warning -panic -verbose -config gen/docgen.yaml
            out: "Formatting generated source...."
            go: <null> fmt @{g: builtins/docs/*.go}
            go: <null> fmt @{g: config/defaults/*.go}
            out: "Compiling murex...."
            go: build github.com/lmorg/murex
            out: "Starting...."
            ./murex --inspect --debug
        }
    }

    function mxtest {
        # Builds murex then runs the testing frameworks against the compiled binary
        try {
            out: "Running docgen...."
            docgen: <!out> -verbose -warning -config gen/docgen.yaml
            out: "Formatting generated source...."
            go: <null> fmt @{g: builtins/docs/*.go}
            go: <null> fmt @{g: config/defaults/*.go}
            out: "Compiling murex...."
            go: build github.com/lmorg/murex
            out: "Running test suites...."
            go: test ./... -count 10
            ./murex --run-tests
            #if { which timeout } then { ./test/regression_test.sh }
            ./test/test_goos.mx
        }
        catch {
            out: "{RED}Testing failed :({RESET}"
        }
    }

    alias: mxinstall=go install github.com/lmorg/murex
    alias: mxdocgen=go install github.com/lmorg/murex/utils/docgen

    function mxbuiltin-src {
        # Find which .go file contains the import for a murex builtin
        find: $GOPATH/src/github.com/lmorg/murex/builtins/ -name *.go -exec grep -H (lang\.GoFunctions\["$ARGS[1]"\]) {} \; -> regexp: s,$GOPATH/src/github.com/lmorg/murex/builtins/,,
    }

    function mxgrep {
        # Grep through murex's source code
        find: $GOPATH/src/github.com/lmorg/murex/ -name *.go -not -path $GOPATH/src/github.com/lmorg/murex/vendor -exec grep -H ($ARGS[1]) {} \; -> regexp: s,$GOPATH/src/github.com/lmorg/murex/,,
    }
}

